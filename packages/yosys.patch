--- kernel/yosys.cc.orig	2024-09-22 00:15:16
+++ kernel/yosys.cc	2024-09-22 00:15:18
@@ -1031,13 +1031,13 @@
 		yosys_share_dirname = proc_share_path;
 		return;
 	}
-#    ifdef YOSYS_DATDIR
-	proc_share_path = YOSYS_DATDIR "/";
+	const char* env_datdir = std::getenv("YOSYS_DATDIR");
+	proc_share_path = env_datdir != nullptr ? env_datdir : "./";
 	if (check_file_exists(proc_share_path, true)) {
 		yosys_share_dirname = proc_share_path;
 		return;
 	}
-#    endif
+
 #  endif
 }
 #endif

--- passes/equiv/equiv_make.cc.orig	2024-09-02 14:54:10
+++ passes/equiv/equiv_make.cc	2024-09-02 15:02:04
@@ -148,7 +148,19 @@
 
 		// list of cells without added $equiv cells
 		auto cells_list = equiv_mod->cells().to_vector();
+		std::set<const RTLIL::Wire *> signed_wire;
 
+		for (auto cell : cells_list) {
+			if (cell->type.in(ID($pos), ID($sshr), ID($add), ID($mul), ID($and), ID($or), ID($xor), ID($sub))) {
+				bool is_signed = cell->getParam(ID::A_SIGNED).as_bool(); // || cell->type == ID($sub);
+				if (is_signed) {
+					const RTLIL::Wire *wire = cell->getPort(ID::Y).chunks()[0].wire;
+					if (wire->is_signed)
+						signed_wire.insert(wire);
+				}
+			}
+		}
+
 		for (auto id : wire_names)
 		{
 			IdString gold_id = id.str() + "_gold";
@@ -224,7 +236,7 @@
 				gate_wire = dec_wire;
 			}
 
-			if (gold_wire == nullptr || gate_wire == nullptr || gold_wire->width != gate_wire->width) {
+			if (gold_wire == nullptr || gate_wire == nullptr) {
 				if (gold_wire && gold_wire->port_id)
 					log_error("Can't match gold port `%s' to a gate port.\n", log_id(gold_wire));
 				if (gate_wire && gate_wire->port_id)
@@ -235,7 +247,43 @@
 			log("Presumably equivalent wires: %s (%s), %s (%s) -> %s\n",
 					log_id(gold_wire), log_signal(assign_map(gold_wire)),
 					log_id(gate_wire), log_signal(assign_map(gate_wire)), log_id(id));
+
+			if (gold_wire->width > gate_wire->width) {
+				char name[gate_wire->name.str().size()+32];
+
+				auto w2 = RTLIL::SigSpec(gate_wire);
+				if (signed_wire.count(gate_wire) || gate_wire->is_signed || gold_wire->is_signed) {
+					sprintf(name, "%s_sext", gate_wire->name.c_str());
+					w2.extend_u0(gold_wire->width, true);  // sign extend
+				}else{
+					sprintf(name, "%s_zext", gate_wire->name.c_str());
+					w2.extend_u0(gold_wire->width, false);  // zero extend
+				}
+
+				RTLIL::IdString id_name(name);
+				RTLIL::Wire *wire =  equiv_mod->addWire(id_name, gold_wire->width);
+				equiv_mod->connect(wire, w2);
+
+				gate_wire = wire;
+			}else if (gold_wire->width < gate_wire->width) {
+				char name[gate_wire->name.str().size()+32];
+
+				auto w2 = RTLIL::SigSpec(gold_wire);
+				if (signed_wire.count(gold_wire)) {
+					sprintf(name, "%s_sext", gold_wire->name.c_str());
+					w2.extend_u0(gate_wire->width, true);  // sign extend
+				}else{
+					sprintf(name, "%s_zext", gold_wire->name.c_str());
+					w2.extend_u0(gate_wire->width, false);  // zero extend
+				}
 
+				RTLIL::IdString id_name(name);
+				RTLIL::Wire *wire =  equiv_mod->addWire(id_name, gate_wire->width);
+				equiv_mod->connect(wire, w2);
+
+				gold_wire = wire;
+			}
+
 			if (gold_wire->port_output || gate_wire->port_output)
 			{
 				gold_wire->port_input = false;

--- passes/sat/miter.cc.orig	2024-09-02 15:16:52
+++ passes/sat/miter.cc	2024-09-02 15:56:20
@@ -86,15 +86,14 @@
 	RTLIL::Module *gold_module = design->module(gold_name);
 	RTLIL::Module *gate_module = design->module(gate_name);
 	pool<Wire*> gold_cross_ports;
-
+	std::map<const RTLIL::Wire *, int> gold2resize;
 	for (auto gold_wire : gold_module->wires()) {
 		if (gold_wire->port_id == 0)
 			continue;
 		RTLIL::Wire *gate_wire = gate_module->wire(gold_wire->name);
 		if (gate_wire == nullptr)
 			goto match_gold_port_error;
-		if (gold_wire->width != gate_wire->width)
-			goto match_gold_port_error;
+
 		if (flag_cross && !gold_wire->port_input && gold_wire->port_output &&
 				gate_wire->port_input && !gate_wire->port_output) {
 			gold_cross_ports.insert(gold_wire);
@@ -104,6 +103,11 @@
 			goto match_gold_port_error;
 		if (gold_wire->port_output != gate_wire->port_output)
 			goto match_gold_port_error;
+		if (gold_wire->width != gate_wire->width) {
+			int delta = gold_wire->width;
+			delta -= gate_wire->width;
+			gold2resize[gold_wire] = delta;
+		}
 		continue;
 	match_gold_port_error:
 		log_cmd_error("No matching port in gate module was found for %s!\n", gold_wire->name.c_str());
@@ -115,8 +119,6 @@
 		RTLIL::Wire *gold_wire = gold_module->wire(gate_wire->name);
 		if (gold_wire == nullptr)
 			goto match_gate_port_error;
-		if (gate_wire->width != gold_wire->width)
-			goto match_gate_port_error;
 		if (flag_cross && !gold_wire->port_input && gold_wire->port_output &&
 				gate_wire->port_input && !gate_wire->port_output)
 			continue;
@@ -166,18 +168,58 @@
 			gold_cell->setPort(gold_wire->name, w);
 			gate_cell->setPort(gold_wire->name, w);
 		}
+		RTLIL::Wire *w_gold = nullptr;
 
 		if (gold_wire->port_output)
 		{
-			RTLIL::Wire *w_gold = miter_module->addWire("\\gold_" + RTLIL::unescape_id(gold_wire->name), gold_wire->width);
-			w_gold->port_output = flag_make_outputs;
+			RTLIL::Wire *w_gold = nullptr;
+      		RTLIL::Wire *w_gate = nullptr;
+		#if 1
+      		auto it = gold2resize.find(gold_wire);
+		if (it != gold2resize.end()) {
+        	int delta = it->second;
 
-			RTLIL::Wire *w_gate = miter_module->addWire("\\gate_" + RTLIL::unescape_id(gold_wire->name), gold_wire->width);
-			w_gate->port_output = flag_make_outputs;
+        	bool is_signed = gold_wire->is_signed;
+        	auto new_width = gold_wire->width + delta;
+        	if (delta<0)
+          		new_width = gold_wire->width - delta;
+
+       		if (delta<0) {
+        		// gold is smaller than gate
+				w_gold = miter_module->addWire("\\gold_tmp" + RTLIL::unescape_id(gold_wire->name), gold_wire->width);
+           		gold_cell->setPort(gold_wire->name, w_gold);
+
+           		auto w2 = RTLIL::SigSpec(w_gold);
+           		auto nbits = -delta;
+           		for (int i=0;i<nbits;i++)
+           			w2.append(RTLIL::State::Sx);
+
+           		// to keep X at the upper bits w2.extend_u0(new_width, is_signed);
+
+           		RTLIL::Wire *new_wire = miter_module->addWire("\\gold_" + RTLIL::unescape_id(gold_wire->name), new_width);
+
+           		miter_module->connect(new_wire, w2);
+           		w_gold = new_wire;
+				w_gold->port_output = flag_make_outputs;
+				w_gate = miter_module->addWire("\\gate_" + RTLIL::unescape_id(gold_wire->name), gold_wire->width-delta);
+				w_gate->port_output = flag_make_outputs;
+				gate_cell->setPort(gold_wire->name, w_gate);
+			}
+		}
+		#endif

+      	if (w_gold==nullptr) {
+        	w_gold = miter_module->addWire("\\gold_" + RTLIL::unescape_id(gold_wire->name), gold_wire->width);
+        	w_gold->port_output = flag_make_outputs;
+ 
 			gold_cell->setPort(gold_wire->name, w_gold);
-			gate_cell->setPort(gold_wire->name, w_gate);
+		}
+		if (w_gate==nullptr) {
+        	w_gate = miter_module->addWire("\\gate_" + RTLIL::unescape_id(gold_wire->name), gold_wire->width);
+        	w_gate->port_output = flag_make_outputs;
 
+			gate_cell->setPort(gold_wire->name, w_gate);
+		}
 			RTLIL::SigSpec this_condition;
 
 			if (flag_ignore_gold_x)

--- backends/cxxrtl/runtime/cxxrtl/cxxrtl_replay.h.orig	2024-09-22 00:10:06
+++ backends/cxxrtl/runtime/cxxrtl/cxxrtl_replay.h	2024-09-22 00:10:09
@@ -32,8 +32,8 @@
 #include <atomic>
 #include <unordered_map>
 
-#include <cxxrtl/cxxrtl.h>
-#include <cxxrtl/cxxrtl_time.h>
+#include "backends/cxxrtl/runtime/cxxrtl/cxxrtl.h"
+#include "backends/cxxrtl/runtime/cxxrtl/cxxrtl_time.h"
 
 // Theory of operation
 // ===================

--- backends/cxxrtl/runtime/cxxrtl/cxxrtl_time.h.orig	2024-09-22 00:07:38
+++ backends/cxxrtl/runtime/cxxrtl/cxxrtl_time.h	2024-09-22 00:07:40
@@ -22,7 +22,7 @@
 #include <cinttypes>
 #include <string>
 
-#include <cxxrtl/cxxrtl.h>
+#include "backends/cxxrtl/runtime/cxxrtl/cxxrtl.h"
 
 namespace cxxrtl {
 

--- backends/cxxrtl/runtime/cxxrtl/cxxrtl.h.orig	2024-09-21 23:59:25
+++ backends/cxxrtl/runtime/cxxrtl/cxxrtl.h	2024-09-21 23:59:32
@@ -42,7 +42,7 @@
 #include <iostream>
 
 // `cxxrtl::debug_item` has to inherit from `cxxrtl_object` to satisfy strict aliasing requirements.
-#include <cxxrtl/capi/cxxrtl_capi.h>
+#include "backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi.h"
 
 #ifndef __has_attribute
 #	define __has_attribute(x) 0

--- backends/cxxrtl/runtime/cxxrtl/cxxrtl_vcd.h.orig	2024-09-21 23:55:22
+++ backends/cxxrtl/runtime/cxxrtl/cxxrtl_vcd.h	2024-09-21 23:55:46
@@ -19,7 +19,7 @@
 #ifndef CXXRTL_VCD_H
 #define CXXRTL_VCD_H
 
-#include <cxxrtl/cxxrtl.h>
+#include "backends/cxxrtl/runtime/cxxrtl/cxxrtl.h"
 
 namespace cxxrtl {
 

--- backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi_vcd.h.orig	2024-09-21 23:27:27
+++ backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi_vcd.h	2024-09-21 23:27:41
@@ -27,7 +27,7 @@
 #include <stddef.h>
 #include <stdint.h>
 
-#include <cxxrtl/capi/cxxrtl_capi.h>
+#include "backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi.h"
 
 #ifdef __cplusplus
 extern "C" {


--- backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi.cc.orig	2024-09-04 19:35:18
+++ backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi.cc	2024-09-04 19:35:59
@@ -18,8 +18,8 @@
 
 // This file is a part of the CXXRTL C API. It should be used together with `cxxrtl/capi/cxxrtl_capi.h`.
 
-#include <cxxrtl/capi/cxxrtl_capi.h>
-#include <cxxrtl/cxxrtl.h>
+#include "backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi.h"
+#include "backends/cxxrtl/runtime/cxxrtl/cxxrtl.h"
 
 struct _cxxrtl_handle {
 	std::unique_ptr<cxxrtl::module> module;

--- backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi_vcd.cc.orig	2024-09-09 16:33:28
+++ backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi_vcd.cc	2024-09-09 16:33:40
@@ -18,8 +18,8 @@
 
 // This file is a part of the CXXRTL C API. It should be used together with `cxxrtl/capi/cxxrtl_capi_vcd.h`.
 
-#include <cxxrtl/capi/cxxrtl_capi_vcd.h>
-#include <cxxrtl/cxxrtl_vcd.h>
+#include "backends/cxxrtl/runtime/cxxrtl/capi/cxxrtl_capi_vcd.h"
+#include "backends/cxxrtl/runtime/cxxrtl/cxxrtl_vcd.h"
 
 extern const cxxrtl::debug_items &cxxrtl_debug_items_from_handle(cxxrtl_handle handle);
 

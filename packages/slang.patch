diff --git CMakeLists.txt CMakeLists.txt
index 81752e02..33886ba0 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -162,7 +162,9 @@ else()
   message(STATUS "Build STATIC library as: ${SLANG_LIB_NAME}")
 endif()

-include(external/CMakeLists.txt)
+#include(external/CMakeLists.txt)
+get_filename_component(FMT_ROOT_DIR "${FMT_CMAKE_PATH}" DIRECTORY)
+add_subdirectory("${FMT_ROOT_DIR}" fmt EXCLUDE_FROM_ALL)
 add_subdirectory(source)

 if(SLANG_INCLUDE_TOOLS)
diff --git source/ast/Compilation.cpp source/ast/Compilation.cpp
index b1dc4c50..4cac5fdd 100644
--- source/ast/Compilation.cpp
+++ source/ast/Compilation.cpp
@@ -24,6 +24,8 @@
 #include "slang/text/SourceManager.h"
 #include "slang/util/TimeTrace.h"

+#include <atomic>
+
 using namespace slang::parsing;

 namespace slang::ast::builtins {
@@ -159,13 +161,17 @@ Compilation::Compilation(const Bag& options) :
     // Register the built-in gate types.
     builtins::registerGateTypes(*this);

-    // Set a default handler for printing types and symbol paths, for convenience.
-    DiagnosticEngine::setDefaultFormatter<const Type*>(std::make_unique<TypeArgFormatter>());
-    TextDiagnosticClient::setDefaultSymbolPathCB([](const Symbol& sym) {
-        std::string str;
-        sym.getHierarchicalPath(str);
-        return str;
-    });
+    static std::atomic<int> only_one=0;
+    auto only_one_counter = ++only_one;
+    if (only_one_counter==1) {
+        // Set a default handler for printing types and symbol paths, for convenience.
+        DiagnosticEngine::setDefaultFormatter<const Type*>(std::make_unique<TypeArgFormatter>());
+        TextDiagnosticClient::setDefaultSymbolPathCB([](const Symbol& sym) {
+            std::string str;
+            sym.getHierarchicalPath(str);
+            return str;
+        });
+    }

     // Reset systemId counters that may have been changed due to creation of types
     // in the std package.
